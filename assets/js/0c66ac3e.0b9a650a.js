"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2255],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=s(n),g=r,m=u["".concat(l,".").concat(g)]||u[g]||d[g]||o;return n?i.createElement(m,p(p({ref:t},c),{},{components:n})):i.createElement(m,p({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,p=new Array(o);p[0]=g;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:r,p[1]=a;for(var s=2;s<o;s++)p[s]=n[s];return i.createElement.apply(null,p)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},63086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var i=n(25773),r=(n(27378),n(35318));const o={description:"Digital GPIO",title:"Digital IO",sidebar_position:49},p="Digital IO",a={unversionedId:"developer/digital-io/index",id:"developer/digital-io/index",title:"Digital IO",description:"Digital GPIO",source:"@site/docs/developer/digital-io/index.mdx",sourceDirName:"developer/digital-io",slug:"/developer/digital-io/",permalink:"/devicescript/developer/digital-io/",draft:!1,tags:[],version:"current",sidebarPosition:49,frontMatter:{description:"Digital GPIO",title:"Digital IO",sidebar_position:49},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/devicescript/developer/commands"},next:{title:"Wire",permalink:"/devicescript/developer/digital-io/wire"}},l={},s=[{value:"Pin mappings",id:"pin-mappings",level:2},{value:"Mode",id:"mode",level:2},{value:"Output",id:"output",level:2},{value:"Input",id:"input",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"digital-io"},"Digital IO"),(0,r.kt)("p",null,"DeviceScript provides access to digital GPIO (General Purpose Input/Output) operations\non pins that do ",(0,r.kt)("strong",{parentName:"p"},"not")," require precise real time timings."),(0,r.kt)("p",null,"It is recommend to encapsulate the GPIO access into server implementation as they are rather low level."),(0,r.kt)("h2",{id:"pin-mappings"},"Pin mappings"),(0,r.kt)("p",null,"You can either use hardware GPIO numbers using ",(0,r.kt)("a",{parentName:"p",href:"/developer/servers/gpio"},"gpio")," function, or you can import\na board definition file and use the labels present on the board."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { pins } from "@dsboard/adafruit_qt_py_c3"\n\n// highlight-next-line\nconst A2 = pins.A2\n')),(0,r.kt)("p",null,"The doc-string for ",(0,r.kt)("inlineCode",{parentName:"p"},"pins.A2")," will tell you GPIO number (",(0,r.kt)("inlineCode",{parentName:"p"},"1")," in this case).\nUsing named pins is also less error-prone since pins used for internal\nfunctions are not exposed through the ",(0,r.kt)("inlineCode",{parentName:"p"},"pins")," object and the pins that are\nexposed are annotated with type (input, output, analog, etc.) which is then\nrequired by the ",(0,r.kt)("inlineCode",{parentName:"p"},"startSomething()")," functions."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"gpio()")," function does not check for pin functions or usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio } from "@devicescript/core"\n\n// highlight-next-line\nconst P0 = gpio(0)\n')),(0,r.kt)("h2",{id:"mode"},"Mode"),(0,r.kt)("p",null,"The pin can be access through the generic ",(0,r.kt)("inlineCode",{parentName:"p"},"gpio")," function or through board specific packages\nthat provide predefined pin mappings (see ",(0,r.kt)("a",{parentName:"p",href:"/devices"},"devices"),")."),(0,r.kt)("p",null,"You can configure the input/output mode through ",(0,r.kt)("inlineCode",{parentName:"p"},"setMode"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio, GPIOMode } from "@devicescript/core"\nimport "@devicescript/gpio"\n\n// p0 -> output\nconst p0 = gpio(0)\n// highlight-next-line\nawait p0.setMode(GPIOMode.Output)\n\n// P1 -> input\nconst p1 = gpio(1)\n// highlight-next-line\nawait p1.setMode(GPIOMode.Input)\n')),(0,r.kt)("h2",{id:"output"},"Output"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"write")," to set the output value of a pin. This example flips a pin state every second."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio, GPIOMode } from "@devicescript/core"\nimport "@devicescript/gpio"\n\nconst p0 = gpio(0)\nawait p0.setMode(GPIOMode.Output)\n\nlet loop = 0\nsetInterval(async () => {\n    // highlight-next-line\n    await p0.write(loop++ % 2)\n}, 1000)\n')),(0,r.kt)("h2",{id:"input"},"Input"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," to read the input value of a pin. This example reads the input value every second."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio, GPIOMode } from "@devicescript/core"\nimport "@devicescript/gpio"\n\nconst p1 = gpio(1)\nawait p1.setMode(GPIOMode.Input)\n\n// polling read pin\nsetInterval(async () => {\n    // higlight-next-line\n    const v = p1.value\n    console.log({ poll: v })\n}, 1000)\n')),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")," to run code whenever the pin changes state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio, GPIOMode } from "@devicescript/core"\nimport "@devicescript/gpio"\n\nconst p1 = gpio(1)\nawait p1.setMode(GPIOMode.Input)\n\n// highlight-next-line\np1.subscribe(v => console.log({ sub: v }))\n')))}d.isMDXComponent=!0}}]);