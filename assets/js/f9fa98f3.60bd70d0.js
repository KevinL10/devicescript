"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9737],{35318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(27378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(g,p(p({ref:t},c),{},{components:n})):r.createElement(g,p({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,p=new Array(o);p[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:i,p[1]=a;for(var l=2;l<o;l++)p[l]=n[l];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},95571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(25773),i=(n(27378),n(35318));const o={description:"Docs for the GPIO module",title:"GPIO",sidebar_position:9},p="gpio",a={unversionedId:"developer/servers/gpio",id:"developer/servers/gpio",title:"GPIO",description:"Docs for the GPIO module",source:"@site/docs/developer/servers/gpio.mdx",sourceDirName:"developer/servers",slug:"/developer/servers/gpio",permalink:"/devicescript/developer/servers/gpio",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{description:"Docs for the GPIO module",title:"GPIO",sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Servers",permalink:"/devicescript/developer/servers/"},next:{title:"Analog",permalink:"/devicescript/developer/servers/analog"}},s={},l=[{value:"setMode",id:"setmode",level:3},{value:"write",id:"write",level:3},{value:"value",id:"value",level:3},{value:"subscribe",id:"subscribe",level:3}],c={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"gpio"},"gpio"),(0,i.kt)("p",null,"You can either use hardware GPIO numbers using ",(0,i.kt)("inlineCode",{parentName:"p"},"gpio()")," function, or you can import\na board definition file and use the labels present on the board."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { pins } from "@dsboard/adafruit_qt_py_c3"\n\n// highlight-next-line\nconst A2 = pins.A2\n')),(0,i.kt)("p",null,"The doc-string for ",(0,i.kt)("inlineCode",{parentName:"p"},"pins.A2")," will tell you GPIO number (",(0,i.kt)("inlineCode",{parentName:"p"},"1")," in this case).\nUsing named pins is also less error-prone since pins used for internal\nfunctions are not exposed through the ",(0,i.kt)("inlineCode",{parentName:"p"},"pins")," object and the pins that are\nexposed are annotated with type (input, output, analog, etc.) which is then\nrequired by the ",(0,i.kt)("inlineCode",{parentName:"p"},"startSomething()")," functions."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"gpio()")," function does not check for pin functions or usage."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio } from "@devicescript/core"\n\n// highlight-next-line\nconst P0 = gpio(0)\n')),(0,i.kt)("h3",{id:"setmode"},"setMode"),(0,i.kt)("p",null,"Sets the pin input/output and pull up/down mode."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio } from "@devicescript/core"\nimport { GPIOMode } from "@devicescript/core"\n\nconst pin = gpio(0)\n// highlight-next-line\npin.setMode(GPIOMode.Output)\n')),(0,i.kt)("h3",{id:"write"},"write"),(0,i.kt)("p",null,"For digital output, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"write")," function\nafter setting the mode to ",(0,i.kt)("inlineCode",{parentName:"p"},"GPIOMode.Output"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio } from "@devicescript/core"\nimport { HIGH, GPIOMode } from "@devicescript/core"\n\nconst pin = gpio(0)\npin.setMode(GPIOMode.Output)\n\n// start-highlight\npin.write(true)\npin.write(1)\npin.write(HIGH)\n// end-highlight\n')),(0,i.kt)("h3",{id:"value"},"value"),(0,i.kt)("p",null,"For digital input, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," property\nafter setting the mode to ",(0,i.kt)("inlineCode",{parentName:"p"},"GPIOMode.Input"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio } from "@devicescript/core"\nimport { GPIOMode } from "@devicescript/core"\n\nconst pin = gpio(0)\npin.setMode(GPIOMode.Input)\n\n// start-highlight\nconst value = pin.value\n// end-highlight\n')),(0,i.kt)("h3",{id:"subscribe"},"subscribe"),(0,i.kt)("p",null,"You can also ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribe")," to digital input changes\nafter setting the mode to ",(0,i.kt)("inlineCode",{parentName:"p"},"GPIOMode.Input"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { gpio } from "@devicescript/core"\nimport { GPIOMode } from "@devicescript/core"\n\nconst pin = gpio(0)\npin.setMode(GPIOMode.Input)\n\n// start-highlight\npin.subscribe(value => console.data({ value }))\n// end-highlight\n')))}d.isMDXComponent=!0}}]);